{"name":"Pdfmake: Browserified","tagline":"Browserified version of pdfmake. Supports require() and script-tag. Default font Roboto included. Supports custom fonts.","body":"* Browserified version of [pdfmake](http://pdfmake.org/).\r\n* Can be used effortlessly with e.g. [AngularJS](https://angularjs.org/).\r\n* Default font Roboto included, thus zero configuration.\r\n* Supports custom fonts (find prepared fonts here: [Prepared Google Fonts](https://github.com/xErik/pdfmake-fonts-google/tree/master/build/browserified)).\r\n\r\n## Installation\r\n```console\r\nnpm install pdfmake-browserified\r\n```\r\n\r\n## Node Usage\r\n\r\n***Default Font: Roboto***\r\n```javascript\r\nvar createPdf = require('pdfmake-browserified');\r\nvar dd = { content: \"This is a sample PDF printed with pdfMake\" };\r\ncreatePdf(dd).open();\r\n```\r\n\r\n\r\n***Custom Font: Junge***\r\n\r\n*Find prepared fonts for Node here: [Prepared Google Fonts](https://github.com/xErik/pdfmake-fonts-google/tree/master/build/browserified).*\r\n\r\n```javascript\r\nvar createPdf = require('pdfmake-browserified');\r\nvar map = require('<path to>/browserified/ofl/junge.map.js'); // font style mapping\r\nvar data = require('<path to>/browserified/ofl/junge.js'); // font data\r\n\r\nvar defaultFont = Object.keys(map)[0];\r\nvar dd = {\r\n\tcontent: \"This is a sample PDF printed with pdfMake\",\r\n\tdefaultStyle: { font: defaultFont }\r\n};\r\ncreatePdf(dd, map, data).open();\r\n```\r\n\r\n## Browser Usage\r\n\r\n***Default Font: Roboto***\r\n\r\n```html\r\n<!doctype html>\r\n <html lang='en'>\r\n <head>\r\n \t<meta charset='utf-8'>\r\n \t<title>Google Fonts with regular pdfmake</title>\r\n \t<script src='<your path>/pdfmake-browserified.min.js'></script>\r\n </head>\r\n <body>\r\n    <input type=\"button\" onclick=\"openPdf()\" value=\"Open PDF\"></input>\r\n     <script>\r\n        function openPdf() {\r\n            var docDefinition = { content: \"This is a sample PDF printed with pdfMake\" };\r\n            createPdf(docDefinition).open();\r\n        }\r\n     </script>\r\n </body>\r\n</html>\r\n\r\n```\r\n\r\n\r\n***Custom Font: Junge***\r\n\r\n*Find prepared fonts for Browser here: [Prepared Google Fonts](https://github.com/xErik/pdfmake-fonts-google/tree/master/build/script).*\r\n\r\n```html\r\n<!doctype html>\r\n <html lang='en'>\r\n <head>\r\n \t<meta charset='utf-8'>\r\n \t<title>Google Fonts with regular pdfmake</title>\r\n \t<script src='<your path>/pdfmake-browserified.min.js'></script>\r\n \t<script src='<your path>/ofl/junge.js'></script><!-- the font data -->\r\n \t<script src='<your path>/ofl/junge.map.js'></script><!-- the font-style mapping -->\r\n </head>\r\n <body>\r\n    <input type=\"button\" onclick=\"openPdf()\" value=\"Open PDF\"></input>\r\n     <script>\r\n        function openPdf() {\r\n            var docDefinition = {\r\n                content: \"This is a sample PDF printed with pdfMake\",\r\n                defaultStyle: { font: Object.keys(pdfMake.fonts)[0] }\r\n            };\r\n            createPdf(docDefinition, pdfMake.fonts, pdfMake.vfs).open();\r\n        }\r\n     </script>\r\n </body>\r\n</html>\r\n```\r\n\r\n## Motivation\r\n\r\nProviding pdfmake as an npm module, which can be `require`d.\r\n\r\nRemoving boilerplate code, that is required when one uses pdfmake with frameworks line [AngularJS](https://angularjs.org/).\r\n\r\n## Tests\r\n\r\nA small AngularJS example is provided in the test directory.\r\n\r\n\r\nThe commands below will build the module bundle and open a browser. The page provides buttons to check `open` and `download` capabilities manually.\r\n\r\n```\r\nnpm install\r\nnpm start\r\n```\r\n\r\n## Minification for Production\r\n\r\nDuring your production builds, including this module, you want to exclude this module from minification/uglification/compression, as it is already minified. The same is true for custom fonts. Both are pretty big and will slow minification/uglification/compression down.\r\n\r\n## Comparing pdfmake-browserified and pdfmake\r\n\r\npdfmake-browserified can be used like the original pdfmake via `script`-tag in an HTML page. With the same method signature: `createPdf(docDefinition, fonts, vfs).open();`\r\n\r\n**But**: It can be used via `require('pdfmake-browserify')` in Node applications, too. In Node, the method signature stays the same: `createPdf(docDefinition, fonts, vfs).open();`\r\n\r\n## Contributors\r\n\r\nxErik\r\n\r\n### Other Projects\r\n\r\n[**NPM pdfmake-browserified** MIT License](https://www.npmjs.com/package/pdfmake-browserified)\r\n\r\n[**GIT pdfmake-browserified** MIT License](https://github.com/xErik/pdfmake-browserified)\r\n\r\n[**pdfmake** MIT License](http://pdfmake.org/)\r\n\r\n[**Roboto** Apache License](https://www.google.com/fonts/specimen/Roboto)\r\n\r\n[**Junge** OFL License](https://www.google.com/fonts/specimen/Junge)\r\n\r\n## Note\r\n\r\nI did this for fun. Contributions from people with a more solid node background are welcome!\r\n\r\n## License\r\n\r\nMIT\r\n","google":"UA-64828017-1","note":"Don't delete this file! It's used internally to help with page regeneration."}